
# ------------------------------------------- #
#			用于shell的环境变量配置
# ------------------------------------------- #

# conda
# export PATH=$PATH:"$HOME/miniconda3/bin"
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('/home/silascript/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
	# eval "$__conda_setup"
# else
	# if [ -f "/home/silascript/miniconda3/etc/profile.d/conda.sh" ]; then
		# . "/home/silascript/miniconda3/etc/profile.d/conda.sh"
	# else
		# export PATH="/home/silascript/miniconda3/bin:$PATH"
	# fi
# fi
# unset __conda_setup
# <<< conda initialize <<<

# ------------------------------------------------------------------------------ #

# golang
# GOROOT=/opt/golang
# PATH=$PATH:$GOROOT/bin
# PATH=$PATH:$(go env GOPATH)/bin

# 使用goenv来管理golang
# GOENV_ROOT="$HOME/.goenv"
# PATH=$PATH:$GOENV_ROOT
# eval "$(goenv init -)"
# GOROOT=$(go env GOROOT)
# PATH=$PATH:$GOROOT/bin
# PATH=$PATH:$(go env GOPATH)/bin

# 使用g来管理golang
# [ -s "${HOME}/.g/env" ] && \. "${HOME}/.g/env"  # g shell setup

GOROOT="${HOME}/.g/go"
# 如果GOPATH变量为空则设置为用户根目录下的go目录
[ -z "$GOPATH" ] && export GOPATH="${HOME}/go"
PATH="$PATH:${HOME}/.g/bin:${GOROOT}/bin:${GOPATH}/bin"
# 镜像配置 export 不能省
# 官方镜像
export G_MIRROR=https://golang.google.cn/dl/
# 阿里云镜像
# export G_MIRROR=https://mirrors.aliyun.com/golang/



# ------------------------------------------------------------------------------ #

# Rust
. "$HOME/.cargo/env"
# rust 源
# 清华
export RUSTUP_UPDATE_ROOT="https://mirrors.tuna.tsinghua.edu.cn/rustup/rustup"
export RUSTUP_DIST_SERVER="https://mirrors.tuna.tsinghua.edu.cn/rustup"
# 字节
export RUSTUP_DIST_SERVER="https://rsproxy.cn"
export RUSTUP_UPDATE_ROOT="https://rsproxy.cn/rustup"

# ------------------------------------------------------------------------------ #

# 使用fnm对Node进行版本管理
eval "$(fnm env --use-on-cd)"

# nodejs
# 根据不同版本自行修改路径
# NODE_HOME=/opt/NodeJS/node-v20
# NODE_HOME=/opt/NodeJS/node-v22

# 全局模块目录
NODE_PATH=$HOME/nodejs/node_global/bin
# 使用fnm等版本管理工具就不用将nodejs安装目录放进PATH路径中了
# 防止node安装目录中的npm放在PATH前面，所以将NODE_PATH加在原有PATH之前
# export PATH=$NODE_PATH:$PATH
PATH=$NODE_PATH:$PATH
# PATH=$PATH:$NODE_PATH:$NODE_HOME/bin

# 配置node和npm的安装包镜像
# 腾讯云镜像
# export FNM_NODE_DIST_MIRROR=https://mirrors.cloud.tencent.com/nodejs-release/
# 这个实际应该在.npmrc中registry项配的
# NPM_CONFIG_REGISTRY=https://mirrors.cloud.tencent.com/npm/
# 阿里云镜像
FNM_NODE_DIST_MIRROR=https://npmmirror.com/mirrors/node/
# 这个实际应该在.npmrc中registry项配的
# NPM_CONFIG_REGISTRY=https://npmmirror.com/mirrors/npm/

# ecletron
# ecletron 的代理不需要在这里配，应在.npmrc文件中配
# ELECTRON_MIRROR=http://npm.taobao.org/mirrors/electron/

# ------------------------------------------------------------------------------ #

# Java
# SDKMan
#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
# export SDKMAN_DIR="$HOME/.sdkman"
# [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

#export JAVA_HOME="$SDKMAN_DIR/candidates/java/current"
# export CLASSPATH="."


# ------------------------------------------------------------------------------ #

# ruby
#
# chruby
#if [ -n "$BASH_VERSION" ] || [ -n "$ZSH_VERSION" ]; then
 # source /usr/share/chruby/chruby.sh
 # source /usr/share/chruby/auto.sh
#fi
#

#rbenv
#if [ -n "$BASH_VERSION" ]; then
#  eval "$(rbenv init - bash)"
#elif [ -n "$ZSH_VERSION" ]; then
#  eval "$(rbenv init - zsh)"
#fi

# 设置ruby-build镜像源
#export RUBY_BUILD_MIRROR_URL=https://cache.ruby-china.com
# 设置下载工具
#export RUBY_BUILD_HTTP_CLIENT=wget

# frum
eval "$(frum init)"


# ------------------------------------------------------------------------------ #

# vscode
# PATH=${PATH}:/opt/VSCode/bin
PATH=$PATH:/opt/visual-studio-code/bin

# ------------------------------------------------------------------------------ #

# docker sh
# source ~/docker_sh/docker_info.sh

# ------------------------------------------------------------------------------ #

# IDEA crack shell
# 如果不用 IDEA的可以注释
___MY_VMOPTIONS_SHELL_FILE="${HOME}/.jetbrains.vmoptions.sh"; if [ -f "${___MY_VMOPTIONS_SHELL_FILE}" ]; then . "${___MY_VMOPTIONS_SHELL_FILE}"; fi



